#!/usr/bin/env bash

# Moviuro's Kernel Modules Manager
# A successor to https://github.com/saber-nyan/kernel-modules-hook
# Released under the MIT License

_myname='mkmm'
_confpath="/etc/$_myname.conf"
source $_confpath || true
_bakpath=${_bakpath:-"/usr/lib/$_myname"}

__usage(){
  cat << EOH
mkmm [-vf] save|restore|bakclean|modclean [kver]

mkmm is Moviuro's Kernel Module Manager intended to be used in an
alpm-hook(5) to save and restore the running kernel's modules because pacman(8)
will remove them during an upgrade

-v : verbose (bash set -x)
-f : force (see below)

save       : use cp(1) to hardlink the kernel modules in a backup directory if
             they aren't already backed up (--archive --link)
-f save    : remove the existing backup if it exists, then save
-f restore : remove the current modules' directory, then restore

tsave      : use cp(1) and tmpfs(5) to copy the kernel modules in a temporary
             filesystem if it doesn't yet exist
restore    : use bind mount(8) to move the tsave-d tmpfs(5) back in place if
             needed
restore    : use cp(1) to hardlink the backed-up kernel modules back in place if
             they aren't found

bakclean      : remove the backup directory (rm(1) or umount && rmdir)
modclean     : rm(1) -rf modules' directories that don't belong to a pacman(8)
             package, except for the currently running kernel
-f modclean  : like modclean, but including the current running kernel

kver : an optional argument to specify which kernel modules to save;
       defaults to the current running kernel (uname(1) -r)

SEE ALSO

https://bugs.archlinux.org/task/16702
https://github.com/saber-nyan/kernel-modules-hook
EOH
}

# We handle regular directories and mountpoints too...
__remove() {
  : "${1?Missing target}"

  if [[ -e "$1" ]]; then
    if mountpoint -q "$1"; then
      umount $_verbose "$1"
    else
      rm --recursive --force "$1"/*
    fi
    rmdir $_verbose "$1"
  fi
}

# __save kver [force]
__save() {
  : "${1?Missing kver}"
  [[ -n "$2" ]] && _force="--force"
  _src="/usr/lib/modules/$1"
  _dest="$_bakpath/$1"

  if ! [[ -e "$_src/." ]]; then
    printf '%s\n' "/usr/lib/$1 $(tput setaf 1)missing, can’t backup$(tput sgr0)" >&2
    exit 61
  elif ! [[ -e "$_dest" ]] || [[ -n "$_force" ]]; then
    __remove "$_dest"
    _hardlinks=$([[ $(stat -c "%d" "$_src") != $(stat -c "%d" "$_bakpath") ]] || echo '--link')
    cp --archive $_hardlinks "$_src" "$_dest" || exit 6
    [[ -z "$_verbose" ]] || printf '%s\n' "$_dest $(tput setaf 2)backed up$(tput sgr0)"
  else
    printf '%s\n' "$_dest $(tput setaf 3)backup already exists$(tput sgr0)" >&2
    exit 62
  fi
}

# __restore kver [force]
__restore() {
  : "${1?Missing kver}"
  [[ -n "$2" ]] && _force="--force"
  _src="$_bakpath/$1"
  _dest="/usr/lib/modules/$1"

  if ! [[ -e "$_src" ]]; then
    printf '%s\n' "$_src $(tput setaf 1)for restoring not found$(tput sgr0)" >&2
    exit 9
  fi

  if ! [[ -O "$_src" ]] || [[ ! -G "$_src" ]]; then
    printf '%s\n' "$_src $(tput setaf 1)has dubious ownerhsip, won’t restore$(tput sgr0)" >&2
    ls -dl $_src
    exit 93
  elif ! [[ -e "$_dest" ]] || [[ -n "$_force" ]]; then
    __remove "$_dest"

    [[ $(stat -c "%d" "$_src") == $(stat -c "%d" "/usr/lib/modules") ]] \
      && cp --archive --link $_force -- "$_src" "$_dest" \
      || (mkdir "$_dest" && mount --bind "$_src" "$_dest") \
      || exit $?
    [[ -z "$_verbose" ]] || printf '%s\n' "$_dest $(tput setaf 2)restored from backup$(tput sgr0) $_src"
  else
    if mountpoint ${_verbose:+-q} "$_dest"; then
      if [[ $(stat -c "%d" "$_src") != $(stat -c "%d" "$_dest") ]]; then
        printf '%s\n' "$_dest is a moundpoint, but not to our backup location $_src; $(tput setaf 1)can’t restore backup$(tput sgr0)" >&2
        findmnt "$_dest"
        exit 94
      fi
      printf '%s\n' "$_dest $(tput setaf 4)backup is already mounted$(tput sgr0) from $_src" >&2
    elif [[ -n $(find "$_dest" -samefile "$_src"/vmlinuz) ]]; then
      printf '%s\n' "$_dest $(tput setaf 4)backup is already linked$(tput sgr0) from $_src" >&2
      exit 91
    else
      printf '%s\n' "$_dest already exists, $(tput setaf 1)can’t restore backup$(tput sgr0)" >&2
      exit 92
    fi
  fi
}

# __bakclean kver [force]
__bakclean() {
  : "${1?Missing kver}"
  [[ -n "$2" ]] && _force="--force"
  _dest="$_bakpath/$1"

  if ! [[ -e "/usr/lib/modules/$1" ]] && [[ -e "$_dest" ]] && [[ -z "$_force" ]]; then
    printf '%s\n' \
     "/usr/lib/modules/$1 does not exist, are you sure you want to clean backups? (not removing without --force)" >&2
    exit 10
  fi

  __remove "$_dest"
}

# __modclean [force]
__modclean() {
  [[ -n "$1" ]] && _force="--force"
  _k=$(uname -r)
  _ret=0

  if ! [[ -e "/usr/lib/modules/$_k" ]] && [[ -z "$_force" ]]; then
    printf '%s\n' \
     "/usr/lib/modules/$_k does not exist, are you sure you want to clean?" >&2
    exit 11
  fi

  # Clean /usr/lib/modules: if we're here, we can remove every directory not
  # managed by pacman(8)
  while IFS='' read -r _moddir; do
    if ! pacman -Qqo "$_moddir" >/dev/null 2>&1; then
      if [[ "$_moddir" == "/usr/lib/modules/$(uname -r)" ]] && [[ -z "$_force" ]]; then
        printf '%s\n' \
         "/usr/lib/modules/$_k is the current kernel. (not removing without --force)" >&2
        exit 12
      else
        __remove "$_moddir"
        ((_ret+=$?))
      fi
    fi
  done < <(find /usr/lib/modules -mindepth 1 -maxdepth 1 -type d)
  exit "$_ret"
}

_check=""
_force=""
while getopts ":vfhc" _opt; do
  case "$_opt" in
    c) _check=1             ;;
    h) __usage ; exit 0     ;;
    f) _force=1             ;;
    v) set -x               ;;
    *) __usage >&2 ; exit 1 ;;
  esac
done

shift "$((OPTIND - 1))"
_kver="${2:-"$(uname -r)"}"

if [[ "$2" && ("$_kver" != "$(uname -r)") ]]; then
  printf '%s\n' "$_kver is not our kernel → nothing to do" >&2
  exit "${_force:-0}"
fi

case "$1" in
  save) __save "$_kver" "$_force" ;;
  restore) __restore "$_kver" "$_force" ;;
  bakclean) __bakclean "$_kver" "$_force" ;;
  modclean) __modclean "$_force" ;;
  *) __usage >&2 ; exit 1 ;;
esac
