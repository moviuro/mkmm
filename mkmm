#!/usr/bin/env bash

# Moviuro's Kernel Modules Manager
# A successor to https://github.com/saber-nyan/kernel-modules-hook
# Released under the MIT License

_myname="mkmm"

__usage(){
  cat << EOH
mkmm [-vf] save|restore|tsave|trestore|clean|bleach [kver]

mkmm is Moviuro's Kernel Module Manager intended to be used in an
alpm-hook(5) to save and restore the running kernel's modules because pacman(8)
will remove them during an upgrade

-v : verbose (bash set -x)
-f : force (see below)

save       : use cp(1) to hardlink the kernel modules in a backup directory if
             they aren't already backed up (--archive --link)
-f save    : remove the existing backup if it exists, then use cp(1) --force to
             hardlink the kernel modules in a backup directory
tsave      : use cp(1) and tmpfs(5) to copy the kernel modules in a temporary
             filesystem if it doesn't yet exist
-f tsave   : remove the existing backup if it exists, then tsave
restore    : use cp(1) to hardlink the backed-up kernel modules back in place if
             they aren't found
-f restore : remove the existing modules if they are found, then use cp(1)
             --force to hardlink the backed-up kernel modules back in place
trestore   : use bind mount(8) to move the tsave-d tmpfs(5) back in place if
             needed
-f trestore: remove the current modules' directory, then trestore
clean      : remove the backup directory (rm(1) or umount && rmdir)
bleach     : rm(1) -rf modules' directories that don't belong to a pacman(8)
             package, except for the currently running kernel
-f bleach  : rm(1) -rf modules' directories that don't belong to a pacman(8)
             package

kver : an optional argument to specify which kernel modules to save;
       defaults to the current running kernel (uname(1) -r)

SEE ALSO

https://bugs.archlinux.org/task/16702
https://github.com/saber-nyan/kernel-modules-hook
EOH
}

__mark_mine () {
  touch "$1/.$_myname"
}

__is_mine () {
  [[ -e "$1/.$_myname" ]]
}

# We handle regular directories and mountpoints too...
__remove() {
  : "${1?Missing target}"

  if [[ -e "$1" ]]; then
    if ! __is_mine "$1"; then
      echo "$1 wasn't created by mkmm, not removing it" >&2
      return 1
    else
      if findmnt "$1" >/dev/null; then
        umount "$1"
        rm "$1/.$_myname"
        rmdir "$1"
      else
        rm --recursive --force "$1"
      fi
    fi
  fi
}

# __save kver [force]
__save() {
  : "${1?Missing kver}"
  [[ -n "$2" ]] && _force="--force"
  _dest="/usr/lib/$_myname/$1"

  if ! [[ -e "$_dest" ]] || [[ -n "$_force" ]]; then
    __remove "$_dest"
    cp --archive --link $_force -- \
     "/usr/lib/modules/$1/." "$_dest"
    _ret=$?
    __mark_mine "$_dest"
  fi
  exit "${_ret:-0}"
}

# __tsave kver [force]
__tsave() {
  : "${1?Missing kver}"
  [[ -n "$2" ]] && _force="--force"
  _dest="/usr/lib/$_myname/$1"

  if ! [[ -e "$_dest" ]] || [[ -n "$_force" ]]; then
    __remove "$_dest"
    mkdir -p "$_dest"
    __mark_mine "$_dest" # The token is committed to disk, this is intentional
    mount -t tmpfs -o rw,nodev,nosuid,mode=755 tmpfs "$_dest"
    cp -a "/usr/lib/modules/$1/." "$_dest" || exit 6
    __mark_mine "$_dest"
  fi
}

# __restore kver [force]
__restore() {
  : "${1?Missing kver}"
  [[ -n "$2" ]] && _force="--force"
  _dest="/usr/lib/modules/$1"

  if ! [[ -e "/usr/lib/$_myname/$1" ]]; then
    printf '%s\n' "/usr/lib/$_myname/$1 for restoring not found" >&2
    exit 8
  fi

  if ! [[ -e "$_dest" ]] || [[ -n "$_force" ]]; then
    __remove "$_dest"
    cp --archive --link $_force -- \
     "/usr/lib/$_myname/$1" "$_dest"
    _ret=$?
  fi
  exit "${_ret:-0}"
}

# __trestore kver [force]
__trestore() {
  : "${1?Missing kver}"
  [[ -n "$2" ]] && _force="--force"
  _dest="/usr/lib/modules/$1"

  if ! [[ -e "/usr/lib/$_myname/$1" ]]; then
    printf '%s\n' "/usr/lib/$_myname/$1 for restoring not found" >&2
    exit 9
  fi

  if ! [[ -e "$_dest" ]] || [[ -n "$_force" ]]; then
    __remove "$_dest"
    mkdir "$_dest"
    __mark_mine "$_dest" # This token is committed to disk
    mount -o bind "/usr/lib/$_myname/$1" "$_dest"
    _ret=$?
  fi
  exit "${_ret:-0}"
}

# __clean kver [force]
__clean() {
  : "${1?Missing kver}"
  [[ -n "$2" ]] && _force="--force"
  _dest="/usr/lib/$_myname/$1"

  if ! [[ -e "/usr/lib/modules/$1" ]] && [[ -z "$_force" ]]; then
    printf '%s\n' \
     "/usr/lib/modules/$1 does not exist, are you sure you want to clean?" >&2
    exit 10
  fi

  __remove "$_dest"
}

# __bleach [force]
__bleach() {
  [[ -n "$1" ]] && _force="--force"
  _k=$(uname -r)
  _ret=0

  if ! [[ -e "/usr/lib/modules/$_k" ]] && [[ -z "$_force" ]]; then
    printf '%s\n' \
     "/usr/lib/modules/$_k does not exist, are you sure you want to clean?" >&2
    exit 11
  fi

  # Clean /usr/lib/modules: if we're here, we can remove every directory not
  # managed by pacman(8)
  while IFS='' read -r _moddir; do
    if ! pacman -Qqo "$_moddir" >/dev/null 2>&1; then
      if [[ "$_moddir" != "/usr/lib/modules/$(uname -r)" ]] ||
         [[ -n "$_force" ]]; then
        __remove "$_moddir"
        ((_ret+=$?))
      fi
    fi
  done < <(find /usr/lib/modules -mindepth 1 -maxdepth 1 -type d)
  # Clean our directory. Anything inside can be removed because we checked that
  # /usr/lib/modules/$(uname -r) still exists
  while IFS='' read -r _moddir; do
    __remove "$_moddir"
    ((_ret+=$?))
  done < <(find "/usr/lib/$_myname" -mindepth 1 -maxdepth 1 -type d)
  exit "$_ret"
}

_force=""
while getopts ":vfh" _opt; do
  case "$_opt" in
    h) __usage ; exit 0     ;;
    f) _force=1             ;;
    v) set -x               ;;
    *) __usage >&2 ; exit 1 ;;
  esac
done

shift "$((OPTIND - 1))"
_kver="${2:-"$(uname -r)"}"

case "$1" in
  save) __save "$_kver" "$_force" ;;
  tsave) __tsave "$_kver" "$_force" ;;
  restore) __restore "$_kver" "$_force" ;;
  trestore) __trestore "$_kver" "$_force" ;;
  clean) __clean "$_kver" "$_force" ;;
  bleach) __bleach "$_force" ;;
  *) __usage >&2 ; exit 1 ;;
esac
